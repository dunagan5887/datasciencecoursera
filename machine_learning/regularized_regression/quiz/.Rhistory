?train
??train
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_one.R')
rfTestPredictions <- predict(randomForestModel, newdata=vowel.test)
gbmTestPredictions <- predict(boostedModel, newdata=vowel.test)
rfConfustionMatrix <- confusionMatrix(rfTestPredictions, vowel.test$y)
gbmConfustionMatrix <- confusionMatrix(gbmTestPredictions, vowel.test$y)
rfConfustionMatrix
gbmConfustionMatrix
agreed <- rfTestPredictions == gbmTestPredictions
agreed
agreedPredictions <- rfTestPredictions[agreed,]
agreedPredictions <- rfTestPredictions[agreed]
agreedPredictions
agreedAnswers <- vowel.test[agreed]$y
agreedAnswers <- vowel.test[agreed,]$y
agreedAnswers
agreedPredictions
agreedConfusionMatrix <- confusionMatrix(agreedPredictions, agreedAnswers)
agreedConfusionMatrix
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_two.R')
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_two.R')
randomForestPredictions <- predict(randomForestModel,testing)
boostedPredictions <- predict(boostedModel,testing)
ldaPredictions <- predict(ldaModel,testing)
randomForestPredictions <- predict(randomForestModel,testing)
randomForestConfusionMatrix <- confusionMatrix(randomForestPredictions, testing$diagnosis)
boostedPredictions <- predict(boostedModel,testing)
boostedConfusionMatrix <- confusionMatrix(boostedPredictions, testing$diagnosis)
ldaPredictions <- predict(ldaModel,testing)
ldaConfusionMatrix <- confusionMatrix(ldaPredictions, testing$diagnosis)
randomForestConfusionMatrix
boostedConfusionMatrix
ldaConfusionMatrix
stackedPredictionsDataFrame <- data.frame(randomForestPredictions,boostedPredictions,ldaPredictions,diagnosis=testing$diagnosis)
stackedPredictionsModel <- train(diagnosis ~.,method="rf",data=stackedPredictionsDataFrame)
stackedPredictions <- predict(stackedPredictionsModel,stackedPredictionsDataFrame)
stackedConfusionMatrix <- confusionMatrix(stackedPredictions, stackedPredictionsDataFrame$diagnosis)
stackedConfusionMatrix
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_three.R')
?plot.enet
??plot.enet
?l1ce
??l1ce
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_three.R')
install.packages("lasso2")
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_three.R')
??l1ce
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_three.R')
install.packages("MASS")
install.packages("MASS")
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_three.R')
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_three.R')
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_three.R')
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_three.R')
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_three.R')
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_three.R')
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_three.R')
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_three.R')
rss
?plot.enet
??plot.enet
install.packages("enet")
install.packages("plot")
install.packages("elasticnet")
?plot.enet
??plot.enet
?gcv
folds
rss
?enet
??enet
colnames(concrete)
colnames(concrete[-CompressiveStrength])
compressiveStrengthIndex <- grep("CompressiveStrength", colnames(concrete))
enet(concrete[-compressiveStrengthIndex])
library(elasticnet)
enetObject <- enet(concrete[-compressiveStrengthIndex])
compressiveStrengthIndex <- grep("CompressiveStrength", colnames(concrete))
colnames(concrete[-compressiveStrengthIndex])
enetObject <- enet(concrete[-compressiveStrengthIndex], concrete$compressiveStrengthIndex, lambda = 0)
predictorsMatrix <- concrete[-compressiveStrengthIndex]
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_three.R')
enetObject <- enet(x, y, lambda = 0)
predictorsDataFrame <- training[-compressiveStrengthIndex]
predictorsMatrix <- as.matrix(predictorsDataFrame)
enetObject <- enet(predictorsMatrix, training$compressiveStrengthIndex, lambda = 0)
training$compressiveStrengthIndex
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_three.R')
enetObject <- enet(predictorsMatrix, training$CompressiveStrength, lambda = 0)
enetObject$allset
enetObject$beta.pure
??bats
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_four.R')
getwd()
setwd('./quiz/')
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_four.R')
training
summary(training)
?ets
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_four.R')
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_four.R')
plot(tstrain,xlab="Date", ylab="Tumblr Visits")
?window
GOOG
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
mGoog <- to.monthly(GOOG)
colnames(GOOG)
GOOG
colnames(GOOG)
typeof(GOOG)
mGoog <- to.monthly(GOOG)
?to.monthly
GOOG$
rownames(GOOG)
GOOG
colnames(GOOG)
rownames(GOOG)
typeof(GOOG)
dimnames(GOOG)
GOOG$index
class(GOOG)
names(GOOG)
head(GOOG)
GOOG$prefix
GOOG$rownames
row.names(GOOG)
GOOG[0]
GOOG[1]
GOOG[2]
GOOG[0, 0]
GOOG[0, 1]
testGOOG <- GOOG
testGOOG.ROWNAMES
testGOOG$ROWNAMES
testGOOG$CLASS
testGOOG.class
GOOG.index
GOOG.index()
index(GOOG)
?to.monthly
mGoog <- to.monthly(GOOG)
index<-.xts
index
mGoog <- to.monthly(GOOG)
?window
tstrain
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_four.R')
tstrain
ts1Train <- window(tstrain,start=1,end=365)
plot(ts1Train)
lines(ma(ts1Train,order=3),col="red")
batsModel <- bats(ts1Train, model="MMM")
?bats
batsModel <- bats(ts1Train)
forecastedPredictions <- forecast(batsModel)
testing
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_four.R')
forecastAccuracy <- accuracy(forecastedPredictions,ts1Test)
forecastedPredictions
ts1Test
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_four.R')
testing
rows(testing)
numrows(testing)
count(testing)
nrow(testing)
ts1Test <- window(tsTest,start=1,end=235)
forecastAccuracy <- accuracy(forecastedPredictions,ts1Test)
ts1Test
forecastAccuracy <- accuracy(forecastedPredictions,ts1Test)
ts1Test <- window(tsTest,start=1,end=235)
training
tstrain
?window
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_four.R')
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_four.R')
?accuracy
?window
library(lubridate) # For year() function below
library(forecast)
dat = read.csv("./gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
ts1Train <- window(tstrain,start=130,end=365)
library(lubridate) # For year() function below
library(forecast)
dat = read.csv("./gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
ts1Train <- window(tstrain,start=131,end=365)
tsTest = ts(testing$visitsTumblr)
ts1Test <- window(tsTest,start=1,end=235)
ts1Train
batsModel <- bats(ts1Train)
forecastedPredictions <- forecast(batsModel)
forecastAccuracy <- accuracy(forecastedPredictions,ts1Test)
?acuracy
?accuracy
plot(forecastedPredictions)
lines(ts1Test,col="red")
?bats
USAccDeaths
typeof(USAccDeaths)
typeof(dat)
typeof(training)
typeof(tstrain)
tstrain
fit <- bats(USAccDeaths)
plot(forecast(fit))
ts1Train
batsModel <- bats(ts1Train)
plot(forecast(batsModel))
?bats
install.packages(e1071)
install.packages("e1071")
colnames(concrete)
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_five.R')
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_five.R')
predictions <- predict(svmModel, newdata=testing)
predictions
?rmse
??rmse
rmse <- sqrt(sum((predictions-testing$CompressiveStrength)^2))
?svm
??svm
svmModel <- svm(CompressiveStrength ~ ., data = training)
library(e1071)
svmModel <- svm(CompressiveStrength ~ ., data = training)
predictions <- predict(svmModel, newdata=testing)
rmse <- sqrt(sum((predictions-testing$CompressiveStrength)^2))
?bats
library(lubridate) # For year() function below
library(forecast)
dat = read.csv("./gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
ts1Train <- window(tstrain,start=131,end=365)
tsTest = ts(testing$visitsTumblr)
ts1Test <- window(tsTest,start=1,end=235)
batsModel <- bats(ts1Train)
forecastedPredictions <- forecast(batsModel)
forecastAccuracy <- accuracy(forecastedPredictions,ts1Test)
View(testing)
tstrain
forecastAccuracy <- accuracy(forecastedPredictions,ts1Test)
ts1Train <- window(tstrain)
tsTest = ts(testing$visitsTumblr)
ga_ts = ts(dat$visitsTumblr)
ts1Train <- window(ga_ts,start=1,end=365)
ts1Test <- window(ga_ts,start=366)
batsModel <- bats(ts1Train)
forecastedPredictions <- forecast(batsModel)
forecastAccuracy <- accuracy(forecastedPredictions,ts1Test)
forecastAccuracy
?accuracy
plot(forecastedPredictions)
ts1Test
forecastedPredictions
lines(ts1Test,col="red")
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_four.R')
?forecast
nrow(ts1Train)
ncol(ts1Train)
ts1Train
ts1Test
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_four.R')
forecastedPredictions
forecastAccuracy
?accuracy
forecastedPredictions
forecastAccuracy
forecastedPredictions[0]
forecastedPredictions[1]
forecastedPredictions[2]
forecastedPredictions[3]
forecastedPredictions[4]
forecastedPredictions$lower
forecastedPredictions$upper
ts1Test[3]
ts1Test
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_four.R')
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_four.R')
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_three.R')
enetObject
plot.enet
plot.enet(enetObject)
enetObject
?enet
?plot.enet
?enet
enetObject$actions
enetObject$beta.pure
plot.enet(enetObject)
plot.enet(enetObject)
plot.enet(enetObject)
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_five.R')
predictions
typeof(predictions)
predictions
nrow(predictions)
length(predictions)
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_five.R')
source('~/Documents/R/datasciencecoursera/machine_learning/regularized_regression/quiz/question_three.R')
plot.enet(enetObject)
enetObject
enetObject$lambda
enetObject$penalty
enetObject
enetObject$df
enetObject$call
enetObject$allset
enetObject$beta.pure
installed.packages()
installed.packages(AppliedPredictiveModeling)
installed.packages("AppliedPredictiveModeling")
installed.packages("AppliedPredictiveModeling").package
packageVersion("AppliedPredictiveModeling")
packageVersion("ElemStatLearn")
enetObject
?plot.enet
plot.enet(enetObject)
plot.enet(enetObject, xvar="penalty")
plot.enet(enetObject, xvar="step")
source('~/Documents/R/datasciencecoursera/machine_learning/prediction_models/quiz/question_one.R')
segmentationOriginal
colnames()
colnames(segmentationOriginal)
segmentationOriginal$Case
segmentationOriginal$Class
tree
source('~/Documents/R/datasciencecoursera/machine_learning/prediction_models/quiz/question_one.R')
install.packages("rpart")
install.packages("rpart")
source('~/Documents/R/datasciencecoursera/machine_learning/prediction_models/quiz/question_one.R')
source('~/Documents/R/datasciencecoursera/machine_learning/prediction_models/quiz/question_one.R')
tree
tree$frame
tree$cptable
tree$splits
tree$variable.importance
tree$parms
tree$terms
in_training_set
y=segmentationOriginal$Case
y=segmentationOriginal$Case
y
source('~/Documents/R/datasciencecoursera/machine_learning/prediction_models/quiz/question_one.R')
head(in_training_set)
tree
source('~/Documents/R/datasciencecoursera/machine_learning/prediction_models/quiz/question_five.R')
variableImportance
variableImportance$importance
variableImportance$model
variableImportance
?rf
?varImp
?randomForest
randomForestModel <- randomForest(y ~ ., data = vowel.train)
variableImportance <- varImp(randomForestModel)
variableImportance
variableImportance$Overall
sort(variableImportance)
order(variableImportance)
source('~/Documents/R/datasciencecoursera/machine_learning/course_project/test_set_data.R')
