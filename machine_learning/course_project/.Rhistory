library(caret);
source('./utilities.R')
na_values = c('NA','','#DIV/0!')
armBandData = read.csv('pml-training.csv', na.strings=na_values)
setwd("./machine_learning/course_project/")
library(caret);
source('./utilities.R')
na_values = c('NA','','#DIV/0!')
armBandData = read.csv('pml-training.csv', na.strings=na_values)
names(armBandData)
summary(armBandData)
featurePlot(x=armBandData[,columns], y = training$wage, plot="pairs")
columns = c("user_name","num_window","roll_belt","pitch_belt")
featurePlot(x=armBandData[,columns], y = training$wage, plot="pairs")
featurePlot(x=armBandData[,columns], y = armBandData$classe, plot="pairs")
summary(lm(classe ~ ., data=armBandData))
modelFit <- train(armBandData$classe ~ .,method="glm",data=armBandData)
fullArmBandDataRows = getRowsWithFullData(armBandData)
names(fullArmBandDataRows)
nonNaArmBandData <- removeColumnsThatAreMostlyNA(fullArmBandDataRows,na_ratio_threshold=0.0)
nonNaArmBandData
variantArmBandData <- filterOutNonVariantColumns(nonNaArmBandData)
relevantArmBandData <- filterOutIrrelevantVariantColumns(variantArmBandData)
names(relevantArmBandData)
modelFit <- train(relevantArmBandData$classe ~ .,method="glm",data=relevantArmBandData)
library(caret);
source('./utilities.R')
na_values = c('NA','','#DIV/0!')
armBandData = read.csv('pml-training.csv', na.strings=na_values)
TESTarmBandData = read.csv('pml-testing.csv', na.strings=na_values)
modelFit <- train(classe ~.,data=armBandData, method="glm")
fullArmBandDataRows = getRowsWithFullData(armBandData)
nonNaArmBandData <- removeColumnsThatAreMostlyNA(fullArmBandDataRows,na_ratio_threshold=0.0)
variantArmBandData <- filterOutNonVariantColumns(nonNaArmBandData)
#variantArmBandData <- convertUsernameToBinaryVariables(variantArmBandData)
relevantArmBandData <- filterOutIrrelevantVariantColumns(variantArmBandData)
modelFit <- train(classe ~.,data=armBandData, method="glm")
modelFit <- train(classe ~.,data=relevantArmBandData, method="glm")
fullArmBandDataRows = getRowsWithFullData(armBandData)
nonNaArmBandData <- removeColumnsThatAreMostlyNA(fullArmBandDataRows,na_ratio_threshold=0.0)
variantArmBandData <- filterOutNonVariantColumns(nonNaArmBandData)
#variantArmBandData <- convertUsernameToBinaryVariables(variantArmBandData)
relevantArmBandData <- filterOutIrrelevantVariantColumns(variantArmBandData)
fullArmBandDataRows = getRowsWithFullData(armBandData)
nonNaArmBandData <- removeColumnsThatAreMostlyNA(fullArmBandDataRows,na_ratio_threshold=0.0)
variantArmBandData <- filterOutNonVariantColumns(nonNaArmBandData)
#variantArmBandData <- convertUsernameToBinaryVariables(variantArmBandData)
relevantArmBandData <- filterOutIrrelevantVariantColumns(variantArmBandData)
modelFit <- train(classe ~.,data=relevantArmBandData, method="glm")
warnings()
?train()
install.packages("rattle")
install.packages(RGtk2)
install.packages('RGtk2')
install.packages('GTK')
install.packages('gtk')
modelFit <- train(classe ~.,data=relevantArmBandData, method="lm")
names(getModelInfo())
modelFit <- train(classe ~.,data=relevantArmBandData, method="gbm")
modelFit
dir(modelFit)
names(modelFit)
modelFit$modelInfo
names(modelFit)
modelFit$coefnames
names(modelFit)
modelFit$perfNames
modelFit$Accuracy
modelFit$results
modelFit$finalModel
modelFit$metric
modelFit$pred
modelFit$terms
names(modelFit)
modelFit$control
TESTarmBandData = read.csv('pml-testing.csv', na.strings=na_values)
confusionMatrix(TESTarmBandData$classe,predict(modelFit,TESTarmBandData))
predict(modelFit,TESTarmBandData)
names(relevantArmBandData)
names(TESTarmBandData)
TESTarmBandData$max_roll_belt
relevantArmBandData$max_roll_belt
armBandData = read.csv('pml-training.csv', na.strings=na_values)
nonNaArmBandData <- removeColumnsThatAreMostlyNA(fullArmBandDataRows,na_ratio_threshold=0.0)
variantArmBandData <- filterOutNonVariantColumns(nonNaArmBandData)
#variantArmBandData <- convertUsernameToBinaryVariables(variantArmBandData)
relevantArmBandData <- filterOutIrrelevantVariantColumns(variantArmBandData)
library(caret);
source('./utilities.R')
na_values = c('NA','','#DIV/0!')
armBandData = read.csv('pml-training.csv', na.strings=na_values)
TESTarmBandData = read.csv('pml-testing.csv', na.strings=na_values)
nonNaArmBandData <- removeColumnsThatAreMostlyNA(armBandData,na_ratio_threshold=0.0)
variantArmBandData <- filterOutNonVariantColumns(nonNaArmBandData)
#variantArmBandData <- convertUsernameToBinaryVariables(variantArmBandData)
relevantArmBandData <- filterOutIrrelevantVariantColumns(variantArmBandData)
modelFit <- train(classe ~.,data=relevantArmBandData, method="gbm")
save.image("~/Programs/R/datasciencecoursera/machine_learning/course_project/current_environment.T.RData")
save.image("~/Programs/R/datasciencecoursera/machine_learning/course_project/current_environment.RData")
modelFit
confusionMatrix(TESTarmBandData$classe,predict(modelFit,TESTarmBandData))
library(caret)
confusionMatrix(TESTarmBandData$classe,predict(modelFit,TESTarmBandData))
predict(modelFit,TESTarmBandData)
TESTarmBandData$classe
TESTarmBandData = read.csv('pml-testing.csv', na.strings=na_values)
TESTarmBandData$classe
TESTarmBandData
predict(modelFit,TESTarmBandData)
predict(modelFit,relevantArmBandData)
confusionMatrix(relevantArmBandData$classe,predict(modelFit,relevantArmBandData))
predict(modelFit,TESTarmBandData)
library(ISLR); library(ggplot2); library(caret);
data(Wage); Wage <- subset(Wage,select=-c(logwage))
summary(Wage)
modfit <- train(CompressiveStrength ~ ., method='lm', data=concrete)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
library(Hmisc)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
modfit <- train(CompressiveStrength ~ ., method='lm', data=concrete)
finMod <- modFit$finalModel
finMod <- modfit$finalModel
plot(finMod$residuals,pch=19)
modfit <- train(CompressiveStrength ~ Age, method='lm', data=concrete)
finMod <- modfit$finalModel
plot(finMod$residuals,pch=19)
modfit <- train(CompressiveStrength ~ FlyAsh, method='lm', data=concrete)
finMod <- modfit$finalModel
plot(finMod$residuals,pch=19)
install.packages("rattle")
??GTK
